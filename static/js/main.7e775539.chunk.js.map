{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","UserOutputStatic/UserOutputStatic.js","App.js","serviceWorker.js","index.js"],"names":["userInput","props","react_default","a","createElement","type","onChange","changed","value","currentName","style","border","textAlign","height","width","marginTop","fontSize","backgroundColor","color","userOutput","className","userName","userOutputStatic","App","state","username","usernameChangedHandler","event","_this","setState","target","UserInput","this","UserOutput_UserOutput","UserOutputStatic","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAqBeA,EAnBG,SAACC,GAYf,OAAOC,EAAAC,EAAAC,cAAA,SACPC,KAAK,OAAOC,SAAUL,EAAMM,QAC5BC,MAAOP,EAAMQ,YACbC,MAdiB,CACbC,OAAQ,oBACRC,UAAW,SACXC,OAAQ,OACRC,MAAO,MACPC,UAAU,OACVC,SAAU,OACVC,gBAAiB,UACjBC,MAAO,cCCAC,QATI,SAAClB,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,cACXlB,EAAAC,EAAAC,cAAA,sBAAeH,EAAMoB,UACrBnB,EAAAC,EAAAC,cAAA,kDCKGkB,EATU,SAACrB,GACtB,OACIC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,cACXlB,EAAAC,EAAAC,cAAA,sBAAeH,EAAMoB,UACrBnB,EAAAC,EAAAC,cAAA,sCCqBGmB,6MAtBbC,MAAQ,CACNC,SAAU,mBAGZC,uBAAyB,SAACC,GACxBC,EAAKC,SAAS,CAACJ,SAAUE,EAAMG,OAAOtB,iFAGtC,OACEN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2B,EAAD,CACAxB,QAASyB,KAAKN,uBACdjB,YAAauB,KAAKR,MAAMC,WAExBvB,EAAAC,EAAAC,cAAC6B,EAAD,CAAYZ,SAAUW,KAAKR,MAAMC,WACjCvB,EAAAC,EAAAC,cAAC6B,EAAD,CAAYZ,SAAUW,KAAKR,MAAMC,WACjCvB,EAAAC,EAAAC,cAAC8B,EAAD,CAAkBb,SAAS,iBAjBfc,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e775539.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst userInput = (props) => {\r\n    const inputStyle={\r\n        border: '2px solid #fffbf9',    \r\n        textAlign: 'center',\r\n        height: '50px',\r\n        width: '25%',\r\n        marginTop:'40px',\r\n        fontSize: '18px',\r\n        backgroundColor: '#c7e2da',\r\n        color: '#E63700'\r\n    };\r\n\r\n    return <input \r\n    type='text' onChange={props.changed}\r\n    value={props.currentName}\r\n    style={inputStyle}    \r\n    />;\r\n};\r\n\r\nexport default userInput;","import React from 'react';\r\nimport './UserOutput.css'\r\n\r\nconst userOutput = (props) => {\r\n    return (\r\n        <div className='UserOutput'>\r\n            <p>Username: { props.userName }</p>\r\n            <p>I'll be overwritten. Thanks React!</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default userOutput;","import React from 'react';\r\nimport '../UserOutput/UserOutput.css'\r\n\r\nconst userOutputStatic = (props) => {\r\n    return (\r\n        <div className='UserOutput'>\r\n            <p>Username: { props.userName }</p>\r\n            <p>I can't be overwritten!</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default userOutputStatic;","import React, { Component } from 'react';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\nimport UserOutputStatic from './UserOutputStatic/UserOutputStatic';\n\nclass App extends Component {\n  state = {\n    username: 'Julius Caesar'\n  }\n\n  usernameChangedHandler = (event) => {\n    this.setState({username: event.target.value});\n  }\n  render() {\n    return (\n      <div>\n      <UserInput \n      changed={this.usernameChangedHandler}\n      currentName={this.state.username} \n      />\n      <UserOutput userName={this.state.username} />\n      <UserOutput userName={this.state.username} />\n      <UserOutputStatic userName=\"Nate\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}